from typing import TypedDict, List, Annotated, Optional
from langchain_core.messages import BaseMessage
from pydantic import BaseModel, Field
from langgraph.managed import RemainingSteps

# --- Pydantic Models for Structured LLM Output ---

class PlanSection(BaseModel):
    """Represents a single section within the lesson plan, as generated by the LLM."""
    title: str = Field(description="The concise title for this lesson section.")
    description: str = Field(description="A brief summary of what will be taught in this section.")
    duration: int = Field(description="The estimated duration of this section in minutes.")

class LessonPlan(BaseModel):
    """The overall lesson plan structure that the lesson_supervisor must generate."""
    sections: List[PlanSection]

# --- TypedDicts for Graph State Management ---

class StateSection(TypedDict):
    """Represents a section's state within the main graph, including its generated content."""
    title: str
    description: str
    duration: int
    content: Optional[str]

class SectionGenerationState(TypedDict):
    """State for the inner supervisor graph that generates content for a single section."""
    # Inputs from the main graph
    title: str
    description: str
    duration: int
    
    # Generated content pieces
    ppt_content: Optional[dict]
    flashcard_content: Optional[list]
    experiment_content: Optional[dict]
    image_urls: Optional[List[str]]
    
    # The final compiled markdown content for this section
    compiled_content: str
    
    # Agent messages for the inner graph
    messages: Annotated[List[BaseMessage], lambda x, y: x + y]
    remaining_steps: RemainingSteps = 25

class LessonMASState(TypedDict):
    """The overall state of the lesson generation multi-agent system."""
    
    # Inputs from the user
    topic: str
    duration: str
    depth: str
    
    # The high-level plan generated by the lesson_supervisor
    section_plan: List[StateSection]
    
    # State for iterating through the section plan
    current_section_index: int
    
    # Aggregated final result from all sections
    final_content: str
    
    # Agent messages for the outer graph
    messages: Annotated[List[BaseMessage], lambda x, y: x + y]